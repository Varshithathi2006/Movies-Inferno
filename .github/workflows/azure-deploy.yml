name: Deploy to Azure

on:
  push:
    branches: [ main, azure-deployment ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AZURE_RESOURCE_GROUP: movies-rg
  AZURE_LOCATION: eastus
  NODE_VERSION: '18.x'

jobs:
  # Infrastructure Deployment
  infrastructure:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/azure-deployment'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy Azure Infrastructure
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
        template: ./azure/infrastructure/main.bicep
        parameters: |
          location=${{ env.AZURE_LOCATION }}
          projectName=movie-inferno
          environment=production
          administratorLogin=${{ secrets.POSTGRESQL_ADMIN_USERNAME }}
          administratorLoginPassword=${{ secrets.POSTGRESQL_ADMIN_PASSWORD }}
          storageAccountName=${{ secrets.STORAGE_ACCOUNT_NAME }}
          keyVaultName=${{ secrets.KEY_VAULT_NAME }}
          openAiName=${{ secrets.OPENAI_SERVICE_NAME }}
        failOnStdErr: false

    - name: Store secrets in Key Vault
      run: |
        # Store database connection string
        az keyvault secret set \
          --vault-name ${{ secrets.KEY_VAULT_NAME }} \
          --name "postgresql-connection-string" \
          --value "postgresql://${{ secrets.POSTGRESQL_ADMIN_USERNAME }}:${{ secrets.POSTGRESQL_ADMIN_PASSWORD }}@${{ secrets.POSTGRESQL_SERVER_NAME }}.postgres.database.azure.com:5432/movies_db?sslmode=require"
        
        # Store TMDB API key
        az keyvault secret set \
          --vault-name ${{ secrets.KEY_VAULT_NAME }} \
          --name "tmdb-api-key" \
          --value "${{ secrets.TMDB_API_KEY }}"
        
        # Store NextAuth secret
        az keyvault secret set \
          --vault-name ${{ secrets.KEY_VAULT_NAME }} \
          --name "nextauth-secret" \
          --value "${{ secrets.NEXTAUTH_SECRET }}"

  # Database Migration
  database:
    runs-on: ubuntu-latest
    needs: infrastructure
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/azure-deployment'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Install PostgreSQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Run database migration
      env:
        PGHOST: ${{ secrets.POSTGRESQL_SERVER_NAME }}.postgres.database.azure.com
        PGPORT: 5432
        PGDATABASE: movies_db
        PGUSER: ${{ secrets.POSTGRESQL_ADMIN_USERNAME }}
        PGPASSWORD: ${{ secrets.POSTGRESQL_ADMIN_PASSWORD }}
        PGSSLMODE: require
      run: |
        # Create database if it doesn't exist
        psql -c "SELECT 1" || psql -c "CREATE DATABASE movies_db;"
        
        # Run migration scripts in order
        psql -d movies_db -f ./azure/database/migrate-to-azure.sql
        psql -d movies_db -f ./azure/database/functions-azure.sql
        psql -d movies_db -f ./azure/database/triggers-azure.sql
        psql -d movies_db -f ./azure/database/rls-azure.sql
        
        echo "Database migration completed successfully"

  # Build and Test
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Create Azure environment file
      run: |
        cat > .env.azure << EOF
        NODE_ENV=production
        NEXT_PUBLIC_APP_ENV=azure
        AZURE_POSTGRESQL_CONNECTION_STRING=postgresql://${{ secrets.POSTGRESQL_ADMIN_USERNAME }}:${{ secrets.POSTGRESQL_ADMIN_PASSWORD }}@${{ secrets.POSTGRESQL_SERVER_NAME }}.postgres.database.azure.com:5432/movies_db?sslmode=require
        AZURE_STORAGE_CONNECTION_STRING=${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}
        AZURE_KEY_VAULT_URL=https://${{ secrets.KEY_VAULT_NAME }}.vault.azure.net/
        AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }}
        AZURE_AD_B2C_TENANT_NAME=${{ secrets.AZURE_AD_B2C_TENANT_NAME }}
        AZURE_AD_B2C_CLIENT_ID=${{ secrets.AZURE_AD_B2C_CLIENT_ID }}
        AZURE_AD_B2C_POLICY_NAME=${{ secrets.AZURE_AD_B2C_POLICY_NAME }}
        APPLICATIONINSIGHTS_CONNECTION_STRING=${{ secrets.APPLICATIONINSIGHTS_CONNECTION_STRING }}
        NEXT_PUBLIC_TMDB_API_KEY=${{ secrets.TMDB_API_KEY }}
        NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
        NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
        EOF

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run type-check
      continue-on-error: true

    - name: Run tests
      run: npm run test
      continue-on-error: true

    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          .next/
          public/
          package.json
          package-lock.json
          next.config.js
          staticwebapp.config.json
        retention-days: 1

  # Deploy to Azure Static Web Apps
  deploy-swa:
    runs-on: ubuntu-latest
    needs: [infrastructure, database, build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/azure-deployment'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files

    - name: Deploy to Azure Static Web Apps
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "/"
        api_location: "api"
        output_location: ".next"
        skip_app_build: true
        skip_api_build: false

  # Alternative: Deploy to Azure App Service
  deploy-app-service:
    runs-on: ubuntu-latest
    needs: [infrastructure, database, build]
    if: false # Set to true if using App Service instead of Static Web Apps
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install production dependencies
      run: npm ci --only=production

    - name: Deploy to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_APP_SERVICE_NAME }}
        publish-profile: ${{ secrets.AZURE_APP_SERVICE_PUBLISH_PROFILE }}
        package: .

  # Health Check and Smoke Tests
  health-check:
    runs-on: ubuntu-latest
    needs: [deploy-swa]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/azure-deployment'
    
    steps:
    - name: Wait for deployment
      run: sleep 60

    - name: Health check
      run: |
        # Check if the application is responding
        curl -f ${{ secrets.NEXTAUTH_URL }}/api/health || exit 1
        
        # Check database connectivity
        curl -f ${{ secrets.NEXTAUTH_URL }}/api/health/database || exit 1
        
        # Check Azure services
        curl -f ${{ secrets.NEXTAUTH_URL }}/api/health/azure || exit 1
        
        echo "All health checks passed!"

    - name: Run smoke tests
      run: |
        # Test main pages
        curl -f ${{ secrets.NEXTAUTH_URL }}/ || exit 1
        curl -f ${{ secrets.NEXTAUTH_URL }}/movies || exit 1
        curl -f ${{ secrets.NEXTAUTH_URL }}/tv-shows || exit 1
        
        echo "Smoke tests completed successfully!"

  # Cleanup on failure
  cleanup:
    runs-on: ubuntu-latest
    needs: [infrastructure, database, build, deploy-swa, health-check]
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/azure-deployment')
    
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Rollback on failure
      run: |
        echo "Deployment failed. Consider manual rollback if needed."
        # Add rollback logic here if needed
        
    - name: Notify team
      run: |
        echo "Deployment failed. Team has been notified."
        # Add notification logic here (Slack, Teams, email, etc.)

  # Post-deployment tasks
  post-deployment:
    runs-on: ubuntu-latest
    needs: [health-check]
    if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/azure-deployment')
    
    steps:
    - name: Update Application Insights
      run: |
        echo "Deployment completed successfully"
        # Add Application Insights custom event
        
    - name: Cache warming
      run: |
        # Warm up the application cache
        curl -s ${{ secrets.NEXTAUTH_URL }}/api/movies?page=1 > /dev/null
        curl -s ${{ secrets.NEXTAUTH_URL }}/api/tv-shows?page=1 > /dev/null
        curl -s ${{ secrets.NEXTAUTH_URL }}/api/genres > /dev/null
        
    - name: Success notification
      run: |
        echo "Movie Inferno successfully deployed to Azure!"
        echo "Application URL: ${{ secrets.NEXTAUTH_URL }}"